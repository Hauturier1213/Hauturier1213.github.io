[{"content":"Hugo+Github部署个人博客 本文章主要介绍如何在Windows环境下用Hugo部署个人博客并用Github进行托管。\n配置环境 配置好Git环境 有一个Github账号 配置好Git环境之后最好运行一下下列语句来使得git创建的仓库默认分支为main，以防后面出现问题\n1 git config --global init.defaultBranch main 如果后续出现了本地分支为master而远程分支为main的话可以用以下语句来改变当前分支为main\n1 git branch -M main Hugo安装 打开Poweshell或者CMD运行以下内容安装Hugo： 1 winget install Hugo.Hugo.Extended 检查是否安装成功 关闭当前打开的CMD窗口，重新开一个CMD窗口，输入： 1 hugo version 正确出现hugo相关信息则安装成功。\nGithub创建Blog仓库 打开Github，登陆后点击页面左上角的Github图标，然后创建新repository: 创建一个存放blog的私有仓库：\nRepository name:仓库名，自行设置。\n其余配置按图进行选择，然后点击Create repository\n进入刚创建好的仓库，点击绿色的Code按钮，然后复制链接： 克隆仓库到本地，选择一个文件夹（路径里最好不要有中文） 然后鼠标右键，点击Git Bash Here（如果你没有这个选项说明Git环境配置有问题，请另寻解决办法），然后在打开的窗口中输入： 1 git clone https://github.com/Hauturier1213/BlogSource.git#此处的链接是上一步中复制的链接 使用hugo创建网站项目，继续在窗口中输入： 1 hugo new site try 出现如下信息说明成功\n将生成的try文件夹下的内容复制到第四步clone好的文件夹BlogSource中，完成后clone下来的文件夹中结构如下图所示： 下载主题 在BlogSource文件夹中打开Git Bash，通过下面的语句来下载stak主题（也可以从Hugo主题社区选择自己喜欢的主题进行下载）\n1 git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack 若失败也可以用ssh进行下载（此方法需要进行额外的配置，请自行搜素Github SSH配置）：\n1 git submodule add git@github.com:CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack 下载的主题会在themes文件夹中，然后将主题写入配置文件：\n此处的theme属性值是下载到themes文件夹中的主题文件夹的名字，一定要对应 1 echo \u0026#34;theme = \u0026#39;hugo-theme-stack\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml 将BlogSource\\themes\\hugo-theme-stack\\exampleSite下的hugo.yaml文件复制到BlogSource文件夹中并删除原来的hugo.toml文件\n然后将BlogSource\\themes\\hugo-theme-stack\\exampleSite\\content文件夹下的内容复制到BlogSource\\content中\n最后删除BlogSource\\content\\post中的rich-content文件夹\n创建文章 使用以下语句来创建一个markdown文章：\n1 hugo new post/test/index.md 创建的Markdown文件路劲为/content/post/test/index.md 根据路径找到index.md，打开写入一些内容并保存 注：\n创建的test文件夹就是一篇文章的目录，你可以将该文章中需要的图片等内容都放在test文件夹中 Markdown文件的名字一定要是index.md，否则后续hugo server后图片无法正常显示 如果要创建新的文章，则类似上述的hugo语句，在post文件夹下另外创建一个文件夹 然后便可以预览创建的文章：\n1 hugo server -D 根据给出的地址在浏览器中进行访问：\n点击Test文章便可以看到文章内容：\n到目前为止已经成功了一半，接下来只要把Blog部署到Github即可\n部署到Github 创建Github Pages仓库 首先要先创建一个Github Pages仓库，该仓库必须使用特殊格式命名\u0026lt;username.github.io\u0026gt;，username是你的github用户名。\n注意该仓库要设置为Public并且要勾选添加添加README文件选项。\n生成Action Secrets 进入Github，右上角点击自己的头像-\u0026gt;Settings-\u0026gt;左边侧边栏最下面找到Developer Settings-\u0026gt;进入如下界面并依次点击：\n紧接着进入以下界面，并按图中顺序依次点击：\n然后点击Generate token，一定要复制保存该token，因为该token只出现一次。\n接下来进入我们的BlogSource仓库（最开始创建然后clone到本地的那个仓库），进入Settings界面：\n进入以下界面：\n然后将刚生成的Actions Secrets粘贴进去：\n在本地仓库中配置actions文件 用vscode打开BlogSource文件夹，然后创建.github文件夹，再在.github文件夹中创建workflows文件夹，然后在workflows文件夹中创建hugo.yaml文件，如下图所示：\n在文件中写入以下内容：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 name: deploy # 代码提交到main分支时触发github action on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#34;latest\u0026#34; extended: true - name: Build Web run: hugo -D - name: Deploy Web uses: peaceiris/actions-gh-pages@v4 with: #只用改下面的两个地方 PERSONAL_TOKEN: ${{ secrets.你的BlogSource的action secrets名字 }} EXTERNAL_REPOSITORY: 你的github用户名/你的github用户名.github.io PUBLISH_BRANCH: main PUBLISH_DIR: ./public commit_message: auto deploy 接下来在BlogSource文件夹中打开Git Bash，将分支合并并推送到远程仓库，然后action就会自动部署：\n依次运行以下语句：\n1 2 3 4 hugo git add . git commit -m \u0026#34;deploy blog\u0026#34; git push 最终会显示如下信息：\n可以进入BlogSource仓库的Actions页面查看是否成功：\n然后便可以访问http://.github.io访问博客页面了：\n如我的就是访问http://Hauturier1213.github.io\n如下图所示：\n我们现在可以对网站进行访问了但是还有一个问题，我们刚刚创建的test文章没有显示，这是因为我们的index.md文件中的draft属性设置为了true，将它设置为false然后再执行一遍上述推送过程即可看到：\n到此便完成了整个个人博客的搭建和部署。\n参考 Hugo 官方文档\n如何用 GitHub Pages + Hugo 搭建个人博客\n使用-hugo\u0026ndash;github-pages-部署个人博客\n","date":"2024-10-09T10:45:36+08:00","permalink":"https://example.com/p/hugo-github%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","title":"Hugo+Github部署个人博客"}]